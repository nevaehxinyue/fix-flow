// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Issue {
  id               Int       @id @default(autoincrement())
  title            String    @db.VarChar(255)
  description      String    @db.Text
  status           Status    @default(OPEN)
  severity         Severity  @default(MINOR)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  createdByUserId  String    @db.VarChar(255)
  createdBy        User      @relation("CreatedBy", fields: [createdByUserId], references: [id], onDelete: Cascade)
  assignedToUserId String?   @db.VarChar(255)
  assignedToUser   User?     @relation("AssignedToUser", fields: [assignedToUserId], references: [id])
  projectId        Int
  project          Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  comments         Comment[]
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum Severity {
  CRITICAL
  MAJOR
  MEDIUM
  MINOR
}

model Comment {
  id                Int      @id @default(autoincrement())
  content           String   @db.Text
  createdAt         DateTime @default(now())
  createdByUserId   String   @db.VarChar(255)
  createdBy         User     @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  belongedToIssueId Int
  belongedToIssue   Issue    @relation(fields: [belongedToIssueId], references: [id], onDelete: Cascade)
}

model Project {
  id              Int              @id @default(autoincrement())
  title           String           @db.VarChar(255)
  description     String?
  status          ProjectStatus    @default(OPEN)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  createdByUserId String           @db.VarChar(255)
  createdBy       User             @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  assignedToUsers ProjecOftUsers[] //Many to many relationship to User
  issues          Issue[] //One to Many relationship to Issue
}

enum ProjectStatus {
  OPEN
  COMPLETED
}

model ProjecOftUsers {
  projectId  Int
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId     String   @db.VarChar(255)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

  @@id([projectId, userId]) //The primary keys are 'projectId' and 'userId'
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                        String           @id @default(cuid())
  name                      String?
  email                     String?          @unique
  emailVerified             DateTime?
  image                     String?
  password                  String?
  active                    Boolean?
  verifyToken               String?          @unique
  verifyTokenExpiry         DateTime?
  forgotPasswordToken       String?          @unique
  forgotPasswordTokenExpiry DateTime?
  accounts                  Account[]
  sessions                  Session[]
  createdProjects           Project[]
  assignedProjects          ProjecOftUsers[]
  createdIssue              Issue[]          @relation("CreatedBy")
  assignedIssues            Issue[]          @relation("AssignedToUser")
  comments                  Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
